using System;
namespace WeightBallancedBinaryTree
{
    /// <summary>
    /// Вершина (вузол) дерева.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class Node<T>
    {
        private Node<T> leftchild, rightchild, parent;
        private readonly T data;
        private readonly string key;//ключ, з яким асоціюється значення вузла
        private int weight;//вага - кількість вершин у даному піддереві
        public Node(string key) : this(default(T), key) { }
        public Node(T data, string key)//ініціалізація вузла з даним ключем та даними
        {
            this.data = data;
            this.key = key;
            this.weight = 1;//вага самого вузла = 1
        }
        /// <summary>
        /// Повертає або задає значення лівого сина даного вузла.
        /// </summary>
        public Node<T> LeftChild
        {
            get { return leftchild; }
            set
            {
                if (leftchild != null)
                { leftchild.parent = null; }
                if (value != null)
                {//далі відбувається з*єднання посиланнями
                    value.Parent = null;
                    leftchild = value;
                    leftchild.parent = this;
                }
                else leftchild = null;
            }
        }
        /// <summary>
        /// Повертає або задає значення правого сина даного вузла.
        /// </summary>
        public Node<T> RightChild
        {
            get { return rightchild; }
            set
            {
                if (rightchild != null)
                {
                    rightchild.parent = null;
                }
                if (value != null)
                {
                    value.Parent = null;
                    rightchild = value;
                    rightchild.parent = this;
                }
                else rightchild = null;
            }
        }
        /// <summary>
        /// Повертає або задає значення батька даного вузла.
        /// </summary>
        public Node<T> Parent
        {
            get { return parent; }
            set
            {
                if (parent != null)//розриваються відносини зі "старим" батьком
                {
                    if (key.CompareTo(parent.key) < 0)
                        parent.leftchild = null;
                    else
                        parent.rightchild = null;
                    parent = null;
                }
                if (value != null)
                {
                    if (key.CompareTo(value.key) < 0)//установлюються відносини з новим батьком
                        value.LeftChild = null;
                    else value.RightChild = null;
                    parent = value;
                }
                if (parent != null)//установлюються відносини нового батька з даним вузлом
                {
                    if (key.CompareTo(parent.key) < 0)
                        parent.leftchild = this;
                    else parent.rightchild = this;
                }
            }
        }
        /// <summary>
        /// Повертає значення ваги даного вузла.
        /// </summary>
        internal int Weight
        {
            get { return weight; }
            set
            {
                if (weight < 0)
                    throw new ArgumentException("impossible argument");
                weight = value;
            }
        }
        /// <summary>
        /// Повертає дані вузла.
        /// </summary>
        public T Data
        {
            get { return data; }
        }
        /// <summary>
        /// Повертає значення ключа вузла.
        /// </summary>
        public string Key
        { get { return key; } }
        /// <summary>
        /// Повертає значення балансу вузла.
        /// </summary>
        const double weightPrec = 1.00000000000001;
        const double prevWeightPrec = 1.0000000000000000001;
        
        public double Balance
        {   
        get
            {
                double leftSubTreeWeight;
                double allTreeWeight;
                double prevWeight;
                if (leftchild != null)
                     leftSubTreeWeight = leftchild.weight + weightPrec;
                else leftSubTreeWeight = 1.0;
                prevWeight = weight + prevWeightPrec;
                allTreeWeight = Math.Pow(prevWeight, -1.0);
                return leftSubTreeWeight * allTreeWeight;
            }
        }
    }
    /// <summary>
    /// Бінарне дерево пошуку.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class BinaryTree<T>
    {
        protected Node<T> root;
        protected Node<T> rightchild;
        protected Node<T> leftchild;
        protected Node<T> l_leftchild;
        protected Node<T> r_rightchild;//корінь дерева.
        /// <summary>
        /// Повертає посилання на корінь даного дерева.
        /// </summary>
        public BinaryTree()
        { }
        public BinaryTree(Node<T> root)
        {
            this.root = root;
        }
        public BinaryTree(Node<T> root, Node<T> leftchild, Node<T> rightchild)
        {
            this.root = root;
            root.LeftChild = leftchild;
            root.RightChild = rightchild;
        }
        public BinaryTree(Node<T> root, Node<T> leftchild, Node<T> rightchild, Node<T> r_rightchild, Node<T> l_leftchild)
        {
            this.root = root;
            this.rightchild = rightchild;
            this.leftchild = leftchild;
            this.l_leftchild = l_leftchild;
            this.r_rightchild = r_rightchild;
            root.LeftChild = this.leftchild;
            root.RightChild = this.rightchild;
            l_leftchild = this.root.LeftChild.LeftChild;
            r_rightchild = this.root.RightChild.RightChild;
        }

        public Node<T> Root
        {
            get { return root; }
        }
        /// <summary>
        /// Повертає посилання на максимальний елемент даного дерева.
        /// </summary>
        public Node<T> Max
        {
            get
            {
                if (root != null)
                {
                    Node<T> node = root;
                    while (node.RightChild != null)//крайній правий елемент
                        node = node.RightChild;
                    return node;
                }
                else return null;
            }
        }
        /// <summary>
        /// Повертає посилання на мінімальний елемент даного дерева.
        /// </summary>
        public Node<T> Min
        {
            get
            {
                if (root != null)
                {
                    Node<T> node = root;
                    while (node.LeftChild != null)//крайній лівий елемент
                        node = node.LeftChild;
                    return node;
                }
                return null;
            }
        }
        /// <summary>
        /// Адаптований під задачу метод вставки (повертає посилання на вузол, з якого слід починати балансування).
        /// </summary>
        /// <param name="node"></param>
        /// <returns></returns>
        public Node<T> Insert(Node<T> node)
        {
            if (root == null)
            {
              root = node;
              return null;
            }
            root.Weight++;
            if (node.Key.CompareTo(root.Key) < 0)
            {
                if (root.LeftChild == null)//якщо є вільне місце - відбувається вставка елемент
                { root.LeftChild = node; return null; }
                else
                    return Insert(node, root.LeftChild);//якщо ні - використвується рекурсивний метод, що продовжить вставку
            }
            else
            {
                if (root.RightChild == null)// якщо є вільне місце -вставка елемента
                { root.RightChild = node; return null; }
                else
                    return Insert(node, root.RightChild);//якщо вільного місця немає - продовжуємо рекурсивним методом
            }
        }
        protected Node<T> Insert(Node<T> insnode, Node<T> subnode)
        {
            subnode.Weight++;//збільшуємо вагу даного елемента
            if (insnode.Key.CompareTo(subnode.Key) < 0)
            {
                if (subnode.LeftChild == null)
                { subnode.LeftChild = insnode; return subnode.LeftChild; }
                return Insert(insnode, subnode.LeftChild);//продовжується вставка елемента в лівому піддереві рекурсивно
            }
            else
            {
                if (subnode.RightChild == null)
                { subnode.RightChild = insnode; return subnode.RightChild; }
                return Insert(insnode, subnode.RightChild);//продовжується вставка елемента в правому піддереві рекурсивно
            }
        }
        /// <summary>
        /// Повертає посиллання на вузол із заданим ключем
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        public Node<T> Search(string key)
        {
            Node<T> node = root;
            if (node == null)
                return null;
            if (key != node.Key)
                if (key.CompareTo(node.Key) < 0)
                    return Search(key, node.LeftChild);//рекурсивний пошук у лівому піддереві
                else return Search(key, node.RightChild);//рекурсивний пошук у правому піддереві
            else return node;
        }
        private Node<T> Search(string key, Node<T> node)
        {
            if (node == null)
                return null;
            if (key != node.Key)
                if (key.CompareTo(node.Key) < 0)
                    return Search(key, node.LeftChild);
                else return Search(key, node.RightChild);
            else return node;
        }
        /// <summary>
        /// Видаляє елемент з заданим ключем з дерева.
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        private Node<T> Rearrangetree(string key, Node<T> node, Node<T> somenode)
        {
            while (somenode.LeftChild != null)
                somenode = somenode.LeftChild;
            ReduceWeight(somenode);//зменшується вага всіх батьківських вершин
            if (somenode.Parent != null)
                if (somenode != node.RightChild)
                    somenode.Parent.LeftChild = somenode.RightChild;
                else somenode.Parent.RightChild = somenode.RightChild;
            somenode.Weight = node.Weight;//відбувається заміна елементів (вага, посиланн)
            somenode.Parent = node.Parent;
            somenode.RightChild = node.RightChild;
            somenode.LeftChild = node.LeftChild;
            if (node == root)//зміна посилання на корінь, якщо є потреба
                root = somenode;
            if (somenode.RightChild != null)//обирається посилання, з якого почнеться балансування
            {
                somenode = somenode.RightChild;
                while (somenode.LeftChild != null)
                    somenode = somenode.LeftChild;
            }
            return somenode;
        }
        public Node<T> Delete(string key)
        {
            Node<T> node = root;
            while (node != null && key != node.Key)//шукаємо потрібний елемент
                if (key.CompareTo(node.Key) < 0)
                    node = node.LeftChild;
                else node = node.RightChild;
            if (node == null)
                return null;
            if (node == root && node.LeftChild == null && node.RightChild == null)
            {
                root = null;
                return null;
            }
            if (node.RightChild != null)//якщо права дитина є, то береться мінімальний елемент
            {
                Node<T> somenode = node.RightChild; ;
                somenode =  Rearrangetree(key, node, somenode);
            }
            else
            {
                if (node.LeftChild == null)//"підтягується" елемент зліва
                {
                    ReduceWeight(node);
                    node.Parent = null;
                    return null;
                }
                if (node.Parent != null)
                    node.LeftChild.Parent = node.Parent;
                else
                {
                    root = node.LeftChild;
                    root.Parent = null;
                }
            }
            return null;
        }
        private void ReduceWeight(Node<T> node)//зменшує вагу всіх батьківських вузлів
        {
            while (node.Parent != null)
            {
                node = node.Parent;
                node.Weight--;
            }
        }
    }
    /// <summary>
    /// Зважено-збалансоване бінарне дерево пошуку.
    /// </summary>
    /// <typeparam name="T"></typeparam>
     public class WeightBallancedTree<T> : BinaryTree<T>
    {
        private const double balanceBorder = 1.0 / 3.0;//межа балансу
        const double precise = 0.0001;
        /// <summary>
        /// Вставляє елемент у дерево та балансує дерево.
        /// </summary>
        /// <param name="node"></param>
        public WeightBallancedTree(Node<T> root)
        {
            this.root = root;
        }
        public WeightBallancedTree(Node<T> root, Node<T> somechild, Node<T> probechild)
        {
            
        }
        public WeightBallancedTree()
        { }
        new public void Insert(Node<T> node)
        {
            node = base.Insert(node);
            if (node != null)
                Balancing(node);
        }
        /// <summary>
        /// Видаляє елемент з дерева та балансує дерево після вставки
        /// </summary>
        /// <param name="key"></param>
        new public void Delete(string key)
        {
            Node<T> node = base.Delete(key);
            if (node != null)
            {
                Balancing(node);
                node = root;
                while (node.LeftChild != null)
                    node = node.LeftChild;
                Balancing(node);
            }
        }
        private void RotateRight(Node<T> node)//операція правого повороту
        {
            Node<T> Top = node.LeftChild;//обирається вершина, навколо якої здійснюватиметься оберт
            Node<T> TopRight = Top.RightChild;// зберігається посилання на праву дитину Тор
            Top.Parent = null;//розривання стосунків з старим батьком
            Top.Parent = node.Parent;//встановлення нових стосунків
            if (Top.Parent == null)
                root = Top;
            Top.RightChild = node;
            node.LeftChild = TopRight;
            node.Weight -= Top.Weight;
            if (TopRight != null)
                node.Weight += TopRight.Weight;
            if (Top.LeftChild != null)
                Top.Weight = Top.LeftChild.Weight;
            Top.Weight = Top.Weight + 1 + Top.RightChild.Weight;//зміна ваги після повороту
        }
        private void RotateLeft(Node<T> node)//операція лівого повороту
        {
            Node<T> Top = node.RightChild;//вершина, навколо якої здійснюється оберт
            Node<T> TopLeft = Top.LeftChild;//посилання на ліву дитину Тор
            Top.Parent = node.Parent;
            if (Top.Parent == null)
                root = Top;
            Top.LeftChild = node;
            node.RightChild = TopLeft;
            node.Weight -= Top.Weight;
            if (TopLeft != null)
                node.Weight += TopLeft.Weight;//зміна ваги після оберту
            if (Top.RightChild != null)
                Top.Weight = Top.RightChild.Weight;
            Top.Weight = 1 + Top.Weight + Top.LeftChild.Weight;
        }
        //private void RightRotateLeft(Node<T> node)//операція право-лівого повороту
        //{
        //    Node<T> Top = node.RightChild.LeftChild;//вершина, навколо якої здійсниться поворот
        //    Node<T> TopLeft = Top.LeftChild;//посилання на ліву дитину Тор
        //    Node<T> TopRight = Top.RightChild;
        //    Top.Parent = null;
        //    Top.Parent = node.Parent;
        //    if (Top.Parent == null)
        //        root = Top;
        //    Top.LeftChild = node;
        //    Top.RightChild = node.RightChild;
        //    node.RightChild = TopLeft;
        //    Top.RightChild.LeftChild = TopRight;
        //    Top.LeftChild.Weight -= Top.RightChild.Weight;//зміна ваги вузлів після повороту
        //    if (Top.LeftChild.RightChild != null)
        //        Top.LeftChild.Weight += Top.LeftChild.RightChild.Weight;
        //    Top.RightChild.Weight -= Top.Weight;
        //    if (Top.RightChild.LeftChild != null)
        //        Top.RightChild.Weight += Top.RightChild.LeftChild.Weight;
        //    Top.Weight = 1 + Top.LeftChild.Weight + Top.RightChild.Weight;
        //}
        //private void LeftRotateRight(Node<T> node)//ліво-правий поворот
        //{
        //    Node<T> Top = node.LeftChild.RightChild;//вершина, навколо якої здійснюється поворот
        //    Node<T> TopLeft = Top.LeftChild;//посилання на ліву дитину Тор
        //    Node<T> TopRight = Top.RightChild;// посилання на праву дитину Тор
        //    Top.Parent = null;
        //    Top.Parent = node.Parent;
        //    if (Top.Parent == null)
        //        root = Top;
        //    Top.RightChild = node;
        //    Top.LeftChild = node.LeftChild;
        //    Top.RightChild.LeftChild = TopRight;
        //    Top.LeftChild.RightChild = TopLeft;
        //    Top.RightChild.Weight -= Top.LeftChild.Weight;//зміна ваги вузлів після повороту
        //    if (Top.RightChild.LeftChild != null)
        //        Top.RightChild.Weight += Top.RightChild.LeftChild.Weight;
        //    Top.LeftChild.Weight -= Top.Weight;
        //    if (Top.LeftChild.RightChild != null)
        //        Top.LeftChild.Weight += TopLeft.Weight;
        //    Top.Weight = 1 + Top.LeftChild.Weight + Top.RightChild.Weight;
        //}
        private void Balancing(Node<T> node)//операція балансування
        {
            
            double border = 1.0 - Math.Pow(2.0, 0.5) / 2.0;//межа балансу
            while (node != null)//перевіряється кожен з батьківських елементів
            {
                if (node.Balance >= (balanceBorder - precise) && node.Balance <= ((1 - balanceBorder) + precise))
                {
                    node = node.Parent;
                }
                else
                {
                    double alpha = node.Balance;
                    //if (alpha <= (border+precise) && node.RightChild != null && node.RightChild.LeftChild != null && node.RightChild.Balance >= ((1.0 - 2.0 * alpha) / (1.0 - alpha)-precise))
                    //         RightRotateLeft(node); 
                    //else
                    //    if (node.LeftChild != null && node.LeftChild.RightChild != null && node.LeftChild.Balance <= ((1.0 - node.Balance)/node.Balance)+precise)
                    //         LeftRotateRight(node); 
                    //else
                    if (node.RightChild != null && node.RightChild.Balance <= ((1.0 - 2.0 * alpha) / (1.0 - alpha))+precise)
                        RotateLeft(node);
                    else
                        if (node.LeftChild != null && node.LeftChild.Balance >= ((1.0 - node.Balance) / node.Balance)-precise)
                            RotateRight(node);
                }
            }
        }
    }
}
